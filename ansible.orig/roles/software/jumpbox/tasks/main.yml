---
- name: Create the linux account
  user:
    name: "{{ item.username }}"
    comment: "{{ item.username }}"
    shell: /bin/bash
  with_items: "{{ users }}"

- name: Add SSH public key directory structure
  file: path=/home/{{ item.username }}/.ssh state=directory
  with_items: "{{ users }}"

- name: Lock account
  command: passwd -l "{{ item.username }}"
  with_items: "{{ users }}"
  tags:
  - skip_ansible_lint

- name: Copy SSH public key
  authorized_key:
    user: "{{ item.username }}"
    key: "{{ item.public_key }}"
    exclusive: True
  with_items: "{{ users }}"

- name: Set permissions on the public key structure @ .ssh
  file: path=/home/{{ item.username }}/.ssh state=directory owner="{{ item.username }}" group="{{ item.username }}" mode=0700 recurse=yes
  with_items: "{{ users }}"
  become: true

- name: Set permissions on the public key structure @ authorized_keys
  file: path=/home/{{ item.username }}/.ssh/authorized_keys mode=0600
  with_items: "{{ users }}"
  become: true

- name: Update the system /etc/sudoers file
  template: src=sudoers.j2 dest=/etc/sudoers.d/{{ item.username }}
  with_items: "{{ users }}"

- name: Update the newly created accounts to remove password expiration
  command: passwd -x -1 "{{ item.username }}"
  become: true
  with_items: "{{ users }}"
  tags:
  - skip_ansible_lint

- name: make updates to the /etc/ssh/sshd_config file
  replace:
    dest: "/etc/ssh/sshd_config"
    regexp: '^(AllowUsers(?!.*\b{{ item }}\b).*)$'
    replace: '\1 {{ item.username }}'
  with_items: "{{ users }}"
  notify: restart sshd

- name: make updates to the /etc/ssh/sshd_config file #2
  replace:
    dest: "/etc/ssh/sshd_config"
    regexp: '^(AllowGroups(?!.*\b{{ item }}\b).*)$'
    replace: '\1 {{ item.username }}'
  with_items: "{{ users }}"
  notify: restart sshd
