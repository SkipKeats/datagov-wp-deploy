--- # Create/Configure SecOps user

- name: Create a dedicated Linux user account for scanning purposes
  user:
    name: "{{ secops_user }}"
    comment: "{{ secops_user }}"

- name: Add SSH public key directory structure
  file: path=/home/{{ secops_user }}/.ssh state=directory

- name: Lock account
  command: passwd -l "{{ secops_user }}"
  tags:
  - skip_ansible_lint

- name: Copy the GSA SecOps Scanning Cloud Services SSH public key
  authorized_key: user="{{ secops_user }}" key="{{ secops_user_public_key }}"

- name: Set permissions on the public key structure @ .ssh
  file: path=/home/{{ secops_user }}/.ssh state=directory owner="{{ secops_user }}" group="{{ secops_user }}" mode=0700 recurse=yes
  become: true

- name: Set permissions on the public key structure @ authorized_keys
  file: path=/home/{{ secops_user }}/.ssh/authorized_keys mode=0600
  become: true

- name: Update the system /etc/sudoers file
  template: src=secops-sudoers.j2 dest=/etc/sudoers.d/secops-sudoers

- name: Update the newly created GSA scan accounts to remove password expiration
  command: passwd -x -1 "{{ secops_user }}"
  become: true
  tags:
  - skip_ansible_lint

- name: make updates to the /etc/ssh/sshd_config file
  replace:
    dest: "/etc/ssh/sshd_config"
    regexp: '^(AllowUsers(?!.*\b{{ secops_user }}\b).*)$'
    replace: '\1 {{ secops_user }}'
  notify: restart sshd

- name: make updates to the /etc/ssh/sshd_config file #2
  replace:
    dest: "/etc/ssh/sshd_config"
    regexp: '^(AllowGroups(?!.*\b{{ secops_user }}\b).*)$'
    replace: '\1 {{ secops_user }}'
  notify: restart sshd
